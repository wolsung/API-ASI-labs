import os
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from pathlib import Path

DESKTOP = Path.home() / "Desktop"
SCREENSHOT_DIR = DESKTOP / "–¢–µ—Å—Ç—ã"

def take_screenshot(driver, name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –ø–∞–ø–∫—É '–¢–µ—Å—Ç—ã' –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ"""
    safe_name = "".join(c if c.isalnum() else "_" for c in name)
    path = SCREENSHOT_DIR / f"{safe_name}.png"
    driver.save_screenshot(str(path))
    print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")

def test_create_note(notes_app):
    driver = notes_app
    wait = WebDriverWait(driver, 10)

    # –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    take_screenshot(driver, "01_home_page")

    # –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    add_btn = wait.until(EC.element_to_be_clickable((By.ID, "addNoteBtn")))
    add_btn.click()
    take_screenshot(driver, "02_modal_open")

    # –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É
    wait.until(EC.visibility_of_element_located((By.ID, "noteModal")))
    driver.find_element(By.ID, "noteTitle").send_keys("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞")
    driver.find_element(By.ID, "noteContent").send_keys("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏.")
    driver.find_element(By.ID, "noteTags").send_keys("—Ç–µ—Å—Ç, selenium")
    driver.find_element(By.ID, "notePinned").click()  # –ó–∞–∫—Ä–µ–ø–∏—Ç—å

    take_screenshot(driver, "03_form_filled")

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
    driver.find_element(By.ID, "saveBtn").click()
    take_screenshot(driver, "04_after_save")

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
    note_title = wait.until(EC.visibility_of_element_located((By.XPATH, "//h3[text()='–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞']")))
    assert note_title.is_displayed()
    assert "pinned" in note_title.find_element(By.XPATH, "..").get_attribute("class")

def test_edit_note(notes_app):
    driver = notes_app
    wait = WebDriverWait(driver, 10)

    # –ù–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    edit_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]")))
    edit_btn.click()
    take_screenshot(driver, "05_edit_modal")

    # –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title_input = wait.until(EC.visibility_of_element_located((By.ID, "noteTitle")))
    title_input.clear()
    title_input.send_keys("–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞")
    driver.find_element(By.ID, "saveBtn").click()

    take_screenshot(driver, "06_after_edit")

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    updated = wait.until(EC.visibility_of_element_located((By.XPATH, "//h3[text()='–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞']")))
    assert updated.is_displayed()

def test_filter_by_tag(notes_app):
    driver = notes_app
    wait = WebDriverWait(driver, 10)

    # –í–≤–µ—Å—Ç–∏ —Ç–µ–≥ –≤ —Ñ–∏–ª—å—Ç—Ä
    tag_filter = driver.find_element(By.ID, "tagFilter")
    tag_filter.clear()
    tag_filter.send_keys("—Ç–µ—Å—Ç")
    take_screenshot(driver, "07_tag_filter_applied")

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –≤–∏–¥–Ω–∞
    note = wait.until(EC.visibility_of_element_located((By.XPATH, "//h3[text()='–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞']")))
    assert note.is_displayed()

    # –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
    driver.find_element(By.ID, "clearFilter").click()
    take_screenshot(driver, "08_filter_cleared")

def test_sort_newest(notes_app):
    driver = notes_app
    wait = WebDriverWait(driver, 10)

    # –ù–∞–∂–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É "–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ"
    driver.find_element(By.ID, "sortNewest").click()
    take_screenshot(driver, "09_sorted_newest")

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–º–µ—Ç–∫–∞
    first_note = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".note")))
    assert first_note.is_displayed()

def test_delete_note(notes_app):
    driver = notes_app
    wait = WebDriverWait(driver, 10)

    # –û–±–æ–π—Ç–∏ confirm()
    driver.execute_script("window.confirm = function() { return true; }")

    # –ù–∞–∂–∞—Ç—å "–£–¥–∞–ª–∏—Ç—å"
    delete_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), '–£–¥–∞–ª–∏—Ç—å')]")))
    delete_btn.click()
    take_screenshot(driver, "10_after_delete")

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –∑–∞–º–µ—Ç–∫–∏
    try:
        WebDriverWait(driver, 5).until(
            EC.invisibility_of_element_located((By.XPATH, "//h3[text()='–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞']"))
        )
    except:
        # –ï—Å–ª–∏ –Ω–µ –∏—Å—á–µ–∑–ª–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –µ—Å—Ç—å "–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç"
        empty_state = driver.find_element(By.CLASS_NAME, "empty-state")
        assert empty_state.is_displayed()